<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace는 이름을 구별하기 위한 공간입니다. 쉽게 얘기하면 id는 구별되어야 하므로 별도의 그룹으로 나눕니다.
그래야 id의 충돌하는 경우가 적어지니까. 다른 이유도 있는데 일단 이 정도만 알아두시기 바랍니다.-->
<mapper namespace="com.PSVM.dopamin.dao.UserMapper">
    <!--    <select id="selectPwd" parameterType="String" resultType="UserPwdDto">-->
    <!--        SELECT user_id, user_pwd, in_date,in_user, up_date, up_user FROM USER_SECRET WHERE user_id=#{id};-->
    <!--    </select>-->

    <insert id="insertUser" parameterType="UserDto">

        INSERT INTO USER (user_id, f_nm, l_nm, phone_num, cnty, email, nic, btdt, sex, in_date, in_user, up_date,
                          up_user)
        VALUES (#{user_id}, #{f_nm}, #{l_nm}, #{phone_num}, #{cnty}, #{email}, #{nic}, #{btdt}, #{sex}, now(),
                #{user_id}, now(), #{user_id});
    </insert>
    <insert id="insertUserPwd" parameterType="UserDto">
        INSERT INTO USER_SECRET VALUE (#{user_id},#{user_pwd},now(),
            #{user_id},now(),#{user_id});
    </insert>

    <select id="selectUser" resultType="UserDto">
        SELECT *
        FROM USER
        WHERE user_id = #{user_id}
    </select>
    <delete id="deleteAll">
        DELETE
        FROM USER;
    </delete>

    <delete id="deleteUser" parameterType="String">
        DELETE
        FROM USER
        WHERE user_id = #{user_id}
    </delete>

    <select id="selectIdDuplCnt" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM USER
        WHERE user_id = #{user_id};
    </select>

    <select id="selectUserPwd" parameterType="String" resultType="String">
        SELECT user_pwd
        FROM USER_SECRET
        WHERE user_id = #{user_id}
    </select>

    <insert id="insertCart" parameterType="String">
        INSERT INTO CART (user_id, in_date, in_user, up_date, up_user)
        VALUES (#{user_id}, now(), #{user_id}, now(), #{user_id});
    </insert>

    <select id="selectCartId" parameterType="String" resultType="String">
        SELECT cart_id
        FROM CART
        WHERE user_id = #{user_id};
    </select>

    <update id="updateUserSurvey" parameterType="UserDto">
        UPDATE USER
        SET fav_genre1=#{fav_genre1},
            fav_genre2=#{fav_genre2},
            fav_genre3=#{fav_genre3},
            fav_genre4=#{fav_genre4},
            fav_genre5=#{fav_genre5},
            mbti=#{mbti},
            up_date=now(),
            up_user=#{user_id}
        WHERE user_id = #{user_id};
    </update>

    <update id="updateUser" parameterType="UserDto">
        UPDATE USER
        SET f_nm=#{f_nm},
            l_nm=#{l_nm},
            phone_num=#{phone_num},
            mbti=#{mbti},
            cnty=#{cnty},
            nic=#{nic},
            btdt=#{btdt},
            sex=#{sex},
            fav_genre1=#{fav_genre1},
            fav_genre2=#{fav_genre2},
            fav_genre3=#{fav_genre3},
            fav_genre4=#{fav_genre4},
            fav_genre5=#{fav_genre5},
            up_date=now(),
            up_user=#{user_id}
        WHERE user_id = #{user_id};
    </update>

    <update id="updateUserPwd" parameterType="UserDto">
        UPDATE USER_SECRET
        SET user_pwd=#{user_pwd},
            up_date=now(),
            up_user=#{user_id}
        WHERE user_id = #{user_id};

    </update>

    <insert id="insertUserHist" parameterType="Map">
        INSERT INTO USER_PWD_UPD_HIST
        values (#{user_id}, #{user_pwd}, now(), #{user_id}, now(), #{user_id});
    </insert>

    <select id="selectUserPwdHist" parameterType="String" resultType="String">
        SELECT user_pwd
        FROM USER_PWD_UPD_HIST
        WHERE user_id = #{user_id};
    </select>

    <delete id="deleteUserHist" parameterType="String">
        DELETE
        FROM USER_PWD_UPD_HIST
        WHERE user_id = #{user_id};
    </delete>


    <update id="updateUserPrfImg" parameterType="String">
        UPDATE USER SET prf_img=#{s3Url} WHERE user_id=#{user_id};
    </update>

</mapper>